{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/interfaces/IERC1363.sol:IERC1363": {
        "src": "@openzeppelin/contracts/interfaces/IERC1363.sol:16",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "transferAndCall(address,uint256)",
          "transferAndCall(address,uint256,bytes)",
          "transferFromAndCall(address,address,uint256)",
          "transferFromAndCall(address,address,uint256,bytes)",
          "approveAndCall(address,uint256)",
          "approveAndCall(address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/proxy/Clones.sol:Clones": {
        "src": "@openzeppelin/contracts/proxy/Clones.sol:20",
        "version": {
          "withMetadata": "d542c58c5308fb5bd3a27c91581cbd2a90abf675f56740e0b16807221cb8e273",
          "withoutMetadata": "d542c58c5308fb5bd3a27c91581cbd2a90abf675f56740e0b16807221cb8e273",
          "linkedWithoutMetadata": "d542c58c5308fb5bd3a27c91581cbd2a90abf675f56740e0b16807221cb8e273"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:18",
        "version": {
          "withMetadata": "8053e9128b6b27d430f95a7f02271b110dfa42754f815f5869fb65036fe3391c",
          "withoutMetadata": "8053e9128b6b27d430f95a7f02271b110dfa42754f815f5869fb65036fe3391c",
          "linkedWithoutMetadata": "8053e9128b6b27d430f95a7f02271b110dfa42754f815f5869fb65036fe3391c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Create2.sol:Create2": {
        "src": "@openzeppelin/contracts/utils/Create2.sol:17",
        "version": {
          "withMetadata": "712b608dc33306cfaed2c3095e86051d7d297d44ab273da2046e6d5b02f3e3db",
          "withoutMetadata": "712b608dc33306cfaed2c3095e86051d7d297d44ab273da2046e6d5b02f3e3db",
          "linkedWithoutMetadata": "712b608dc33306cfaed2c3095e86051d7d297d44ab273da2046e6d5b02f3e3db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/Errors.sol:Errors": {
        "src": "@openzeppelin/contracts/utils/Errors.sol:14",
        "version": {
          "withMetadata": "1a199ae2964b4ae4b3145e88fd525b49fcdd0433ac806179f485ef6735903973",
          "withoutMetadata": "1a199ae2964b4ae4b3145e88fd525b49fcdd0433ac806179f485ef6735903973",
          "linkedWithoutMetadata": "1a199ae2964b4ae4b3145e88fd525b49fcdd0433ac806179f485ef6735903973"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      },
      "contracts/CrowdfundingCampaign.sol:CrowdfundingCampaign": {
        "src": "contracts/CrowdfundingCampaign.sol:17",
        "version": {
          "withMetadata": "e8f116851415426202a4149da50a635d11a55e1f9ca0958d90736169f4f34704",
          "withoutMetadata": "e8f116851415426202a4149da50a635d11a55e1f9ca0958d90736169f4f34704",
          "linkedWithoutMetadata": "e8f116851415426202a4149da50a635d11a55e1f9ca0958d90736169f4f34704"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize(address,uint256,uint256,uint256,string)",
          "contribute(address)",
          "finalizeCampaignAfterDeadline()",
          "claimRefund(address)",
          "withdraw()",
          "reclaimContribution()",
          "getState()",
          "getContribution(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CrowdfundingCampaign",
            "src": "contracts/CrowdfundingCampaign.sol:77"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CrowdfundingCampaign",
              "label": "beneficiary",
              "type": "t_address",
              "src": "contracts/CrowdfundingCampaign.sol:27"
            },
            {
              "contract": "CrowdfundingCampaign",
              "label": "goal",
              "type": "t_uint256",
              "src": "contracts/CrowdfundingCampaign.sol:28"
            },
            {
              "contract": "CrowdfundingCampaign",
              "label": "deadline",
              "type": "t_uint256",
              "src": "contracts/CrowdfundingCampaign.sol:29"
            },
            {
              "contract": "CrowdfundingCampaign",
              "label": "withdrawalPeriod",
              "type": "t_uint256",
              "src": "contracts/CrowdfundingCampaign.sol:30"
            },
            {
              "contract": "CrowdfundingCampaign",
              "label": "name",
              "type": "t_string_storage",
              "src": "contracts/CrowdfundingCampaign.sol:31"
            },
            {
              "contract": "CrowdfundingCampaign",
              "label": "totalRaised",
              "type": "t_uint256",
              "src": "contracts/CrowdfundingCampaign.sol:33"
            },
            {
              "contract": "CrowdfundingCampaign",
              "label": "contributions",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/CrowdfundingCampaign.sol:34"
            },
            {
              "contract": "CrowdfundingCampaign",
              "label": "currentState",
              "type": "t_enum(State)1523",
              "src": "contracts/CrowdfundingCampaign.sol:35"
            },
            {
              "contract": "CrowdfundingCampaign",
              "label": "withdrawalDeadline",
              "type": "t_uint256",
              "src": "contracts/CrowdfundingCampaign.sol:36"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_enum(State)1523": {
              "label": "enum CrowdfundingCampaign.State",
              "members": [
                "Fundraising",
                "Successful",
                "Failed"
              ]
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.24"
      },
      "contracts/CrowdfundingFactory.sol:CrowdfundingFactory": {
        "src": "contracts/CrowdfundingFactory.sol:12",
        "version": {
          "withMetadata": "dbe9d7642bb772e1fdc907b6aa1af440642644208466c46bdc39f82d25527503",
          "withoutMetadata": "dbe9d7642bb772e1fdc907b6aa1af440642644208466c46bdc39f82d25527503",
          "linkedWithoutMetadata": "dbe9d7642bb772e1fdc907b6aa1af440642644208466c46bdc39f82d25527503"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "createCampaign(address,uint256,uint256,uint256,string)",
          "getDeployedCampaigns()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "CrowdfundingFactory",
            "src": "contracts/CrowdfundingFactory.sol:28"
          },
          {
            "kind": "state-variable-immutable",
            "name": "implementation",
            "src": "contracts/CrowdfundingFactory.sol:13"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "CrowdfundingFactory",
              "label": "deployedCampaigns",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/CrowdfundingFactory.sol:14"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.24"
      }
    }
  ]
}